@page "/loans/create"
@using LoanTracker.Web.Store.LoanState
@using LoanTracker.Application.Interfaces
@using LoanTracker.Application.Queries
@using LoanTracker.Domain.Entities
@using System.ComponentModel.DataAnnotations
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<LoanState> LoanState
@inject IDispatcher Dispatcher
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IQueryHandler<GetAllBorrowerTypesQuery, IEnumerable<BorrowerType>> BorrowerTypeHandler

<PageTitle>Create Loan - Loan Tracker</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudBreadcrumbs Items="_breadcrumbs" />
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h4" Class="mb-4">Create New Loan Application</MudText>

            <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3">Borrower Information</MudText>

                        <MudTextField Label="Borrower Name"
                                      @bind-Value="_model.BorrowerName"
                                      For="@(() => _model.BorrowerName)"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      Class="mb-3" />

                        <MudSelect T="int"
                                   Label="Borrower Type"
                                   @bind-Value="_model.BorrowerTypeId"
                                   For="@(() => _model.BorrowerTypeId)"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   Class="mb-3">
                            @foreach (var type in _borrowerTypes)
                            {
                                <MudSelectItem Value="@type.BorrowerTypeId">@type.TypeName</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField Label="Contact Person"
                                      @bind-Value="_model.ContactPerson"
                                      For="@(() => _model.ContactPerson)"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      Class="mb-3" />

                        <MudTextField Label="Contact Email"
                                      @bind-Value="_model.ContactEmail"
                                      For="@(() => _model.ContactEmail)"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      Class="mb-3" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3">Loan Details</MudText>

                        <MudNumericField Label="Loan Amount"
                                         @bind-Value="_model.Amount"
                                         For="@(() => _model.Amount)"
                                         Variant="Variant.Outlined"
                                         Format="C0"
                                         Min="0m"
                                         Required="true"
                                         Class="mb-3" />

                        <MudNumericField Label="Interest Rate (%)"
                                         @bind-Value="_model.InterestRate"
                                         For="@(() => _model.InterestRate)"
                                         Variant="Variant.Outlined"
                                         Format="F2"
                                         Min="0m"
                                         Max="100m"
                                         Required="true"
                                         Class="mb-3" />

                        <MudNumericField Label="Term (Years)"
                                         @bind-Value="_model.TermYears"
                                         For="@(() => _model.TermYears)"
                                         Variant="Variant.Outlined"
                                         Min="1"
                                         Max="50"
                                         Required="true"
                                         Class="mb-3" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Purpose"
                                      @bind-Value="_model.Purpose"
                                      For="@(() => _model.Purpose)"
                                      Variant="Variant.Outlined"
                                      Lines="5"
                                      Required="true"
                                      Class="mb-3" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudStack Row="true" Spacing="2" Class="mt-3">
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Save"
                                       Disabled="@LoanState.Value.IsLoading">
                                @if (LoanState.Value.IsLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ml-2">Creating...</MudText>
                                }
                                else
                                {
                                    <MudText>Create Loan</MudText>
                                }
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       OnClick="@(() => Navigation.NavigateTo("/loans"))"
                                       StartIcon="@Icons.Material.Filled.Cancel">
                                Cancel
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>

                <ValidationSummary />
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private CreateLoanModel _model = new();
    private List<BorrowerType> _borrowerTypes = new();
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Loans", href: "/loans"),
            new BreadcrumbItem("Create", href: null, disabled: true)
        };

        var borrowerTypes = await BorrowerTypeHandler.HandleAsync(new GetAllBorrowerTypesQuery());
        _borrowerTypes = borrowerTypes.ToList();
    }

    private void OnValidSubmit()
    {
        Dispatcher.Dispatch(new CreateLoanAction(
            _model.BorrowerName,
            _model.BorrowerTypeId,
            _model.ContactPerson,
            _model.ContactEmail,
            _model.Amount,
            _model.InterestRate,
            _model.TermYears,
            _model.Purpose
        ));

        Snackbar.Add("Loan application created successfully!", Severity.Success);
        Navigation.NavigateTo("/loans");
    }

    public class CreateLoanModel
    {
        [Required(ErrorMessage = "Borrower name is required")]
        [StringLength(200, ErrorMessage = "Borrower name cannot exceed 200 characters")]
        public string BorrowerName { get; set; } = "";

        [Required(ErrorMessage = "Borrower type is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a borrower type")]
        public int BorrowerTypeId { get; set; }

        [Required(ErrorMessage = "Contact person is required")]
        [StringLength(200, ErrorMessage = "Contact person cannot exceed 200 characters")]
        public string ContactPerson { get; set; } = "";

        [Required(ErrorMessage = "Contact email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [StringLength(200, ErrorMessage = "Email cannot exceed 200 characters")]
        public string ContactEmail { get; set; } = "";

        [Required(ErrorMessage = "Loan amount is required")]
        [Range(1, double.MaxValue, ErrorMessage = "Amount must be greater than 0")]
        public decimal Amount { get; set; }

        [Required(ErrorMessage = "Interest rate is required")]
        [Range(0, 100, ErrorMessage = "Interest rate must be between 0 and 100")]
        public decimal InterestRate { get; set; }

        [Required(ErrorMessage = "Term is required")]
        [Range(1, 50, ErrorMessage = "Term must be between 1 and 50 years")]
        public int TermYears { get; set; }

        [Required(ErrorMessage = "Purpose is required")]
        [StringLength(1000, MinimumLength = 10, ErrorMessage = "Purpose must be between 10 and 1000 characters")]
        public string Purpose { get; set; } = "";
    }
}
